PREFIX fhir: <http://hl7.org/fhir/> 
PREFIX fhirvs: <http://hl7.org/fhir/ValueSet/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> 
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> 


#imported_begin 
IMPORT <aux.shex>
#imported_end
#imported_begin 
IMPORT <code.shex>
#imported_end
#imported_begin 
IMPORT <Group.shex>
#imported_end
#imported_begin 
IMPORT <Range.shex>
#imported_end
#imported_begin 
IMPORT <Device.shex>
#imported_end
#imported_begin 
IMPORT <string.shex>
#imported_end
#imported_begin 
IMPORT <Patient.shex>
#imported_end
#imported_begin 
IMPORT <integer.shex>
#imported_end
#imported_begin 
IMPORT <Location.shex>
#imported_end
#imported_begin 
IMPORT <Specimen.shex>
#imported_end
#imported_begin 
IMPORT <Reference.shex>
#imported_end
#imported_begin 
IMPORT <Procedure.shex>
#imported_end
#imported_begin 
IMPORT <Substance.shex>
#imported_end
#imported_begin 
IMPORT <Identifier.shex>
#imported_end
#imported_begin 
IMPORT <Medication.shex>
#imported_end
#imported_begin 
IMPORT <Attachment.shex>
#imported_end
#imported_begin 
IMPORT <Organization.shex>
#imported_end
#imported_begin 
IMPORT <Practitioner.shex>
#imported_end
#imported_begin 
IMPORT <DomainResource.shex>
#imported_end
#imported_begin 
IMPORT <BackboneElement.shex>
#imported_end
#imported_begin 
IMPORT <CodeableConcept.shex>
#imported_end
#imported_begin 
IMPORT <NutritionProduct.shex>
#imported_end
#imported_begin 
IMPORT <BiologicallyDerivedProduct.shex>
#imported_end

start=@<MolecularSequence> AND {fhir:nodeRole [fhir:treeRoot]}

# Representation of a molecular sequence
<MolecularSequence> EXTENDS @<DomainResource> CLOSED {   

    a [fhir:MolecularSequence]?;
    fhir:nodeRole [fhir:treeRoot]?;

    fhir:identifier @<OneOrMore_Identifier>?;  # Unique ID for this particular 
                                            # sequence 
    fhir:type @<code> AND
    	{fhir:v @fhirvs:sequence-type}?;  # aa | dna | rna
    fhir:subject @<Reference> AND {fhir:link 
    			@<BiologicallyDerivedProduct> OR 
    			@<Device> OR 
    			@<Group> OR 
    			@<Location> OR 
    			@<Medication> OR 
    			@<NutritionProduct> OR 
    			@<Organization> OR 
    			@<Patient> OR 
    			@<Practitioner> OR 
    			@<Procedure> OR 
    			@<Substance> ? }?;  # Subject this sequence is 
                                            # associated too 
    fhir:specimen @<Reference> AND {fhir:link 
    			@<Specimen> ? }?;  # Specimen used for sequencing
    fhir:device @<Reference> AND {fhir:link 
    			@<Device> ? }?;  # The method for sequencing
    fhir:performer @<Reference> AND {fhir:link 
    			@<Organization> ? }?;  # Who should be responsible for test 
                                            # result 
    fhir:literal @<string>?;                # Sequence that was observed
    fhir:formatted @<OneOrMore_Attachment>?;  # Embedded file or a link (URL) 
                                            # which contains content to 
                                            # represent the sequence 
    fhir:relative @<OneOrMore_MolecularSequence.relative>?;  # A sequence defined relative to 
                                            # another sequence 
} AND (


# This constraint does not have mapping to a ShEx construct yet.
# Unmapped construct found: count
# Unmapped construct found: Plus
# Unmapped construct found: count
# Unmapped construct found: Plus
# Unmapped construct found: count
# Unmapped construct found: Plus
# Unmapped construct found: count
# # Constraint UniqueKey:msq-6
# Human readable:Have and only have one of the following elements in startingSequence: 1. genomeAssembly; 2 sequence
#
# Constraint: (genomeAssembly.count()+sequenceCodeableConcept.count()+ sequenceReference.count()+ sequenceString.count()) = 1
# ShEx:
#
#(   count  ( fhir:genomeAssembly )  Plus     count  ( fhir:sequenceCodeableConcept )  Plus     count  ( fhir:sequenceReference )  Plus     count  ( fhir:sequenceString )) { fhir:v [1] } 
{}

) AND (

# Constraint UniqueKey:msq-5
# Human readable:Both genomeAssembly and chromosome must be both contained if either one of them is contained

# Constraint: (chromosome.empty() and genomeAssembly.empty()) or (chromosome.exists() and genomeAssembly.exists())
# ShEx:

( NOT { fhir:chromosome {fhir:v .} }  AND  NOT { fhir:genomeAssembly {fhir:v .} } ) OR ({fhir:chromosome . AND {fhir:genomeAssembly .}})

)
 

# A sequence used as starting sequence
<MolecularSequence.relative.startingSequence> EXTENDS @<BackboneElement> CLOSED {   
    fhir:genomeAssembly @<CodeableConcept>?;  # The genome assembly used for 
                                            # starting sequence, e.g. GRCh38 
    fhir:chromosome @<CodeableConcept>?;    # Chromosome Identifier
    fhir:sequence @<CodeableConcept>  OR 
    			@<string>  OR 
    			(@<Reference>  AND {fhir:link @<MolecularSequence> })  ?;  # The reference sequence that 
                                            # represents the starting sequence 
    fhir:windowStart @<integer>?;           # Start position of the window on 
                                            # the starting sequence 
    fhir:windowEnd @<integer>?;             # End position of the window on the 
                                            # starting sequence 
    fhir:orientation @<code> AND
    	{fhir:v @fhirvs:orientation-type}?;  # sense | antisense
    fhir:strand @<code> AND
    	{fhir:v @fhirvs:strand-type}?;  # watson | crick
}  

# Changes in sequence from the starting sequence
<MolecularSequence.relative.edit> EXTENDS @<BackboneElement> CLOSED {   
    fhir:start @<integer>?;                 # Start position of the edit on the 
                                            # starting sequence 
    fhir:end @<integer>?;                   # End position of the edit on the 
                                            # starting sequence 
    fhir:replacementSequence @<string>?;    # Allele that was observed
    fhir:replacedSequence @<string>?;       # Allele in the starting sequence
}  

# A sequence defined relative to another sequence
<MolecularSequence.relative> EXTENDS @<BackboneElement> CLOSED {   
    fhir:coordinateSystem @<CodeableConcept>;  # Ways of identifying nucleotides or 
                                            # amino acids within a sequence 
    fhir:ordinalPosition @<integer>?;       # Indicates the order in which the 
                                            # sequence should be considered when 
                                            # putting multiple 'relative' 
                                            # elements together 
    fhir:sequenceRange @<Range>?;           # Indicates the nucleotide range in 
                                            # the composed sequence when 
                                            # multiple 'relative' elements are 
                                            # used together 
    fhir:startingSequence @<MolecularSequence.relative.startingSequence>?;  # A sequence used as starting 
                                            # sequence 
    fhir:edit @<OneOrMore_MolecularSequence.relative.edit>?;  # Changes in sequence from the 
                                            # starting sequence 
}  

#---------------------- Cardinality Types (OneOrMore) -------------------





<OneOrMore_MolecularSequence.relative> CLOSED {
    rdf:first @<MolecularSequence.relative>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_MolecularSequence.relative> 
}

<OneOrMore_MolecularSequence.relative.edit> CLOSED {
    rdf:first @<MolecularSequence.relative.edit>  ;
    rdf:rest [rdf:nil] OR @<OneOrMore_MolecularSequence.relative.edit> 
}

#---------------------- Value Sets ------------------------

# Type for orientation.
fhirvs:orientation-type ["sense" "antisense"]

# Type if a sequence -- DNA, RNA, or amino acid sequence.
fhirvs:sequence-type ["aa" "dna" "rna"]

# Type for strand.
fhirvs:strand-type ["watson" "crick"]

